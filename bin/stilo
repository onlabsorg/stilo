#!/usr/bin/env node

const logger = require("js-logger");
logger.useDefaults();

const pathlib = require('path');
const fs = require('fs');

const {Package} = require("..");

const commander = require('commander');
const stilo = commander.createCommand();


stilo.version(`v${require("../package.json").version}`, "-v --version");


stilo.command("init")
    .description("initialize the current directory as the root of an olojs document package")
    .action(async () => {
        try {
            logger.info(`@stilo: Initializing stilo package ...`);
            const package = await Package.create(process.cwd());
            logger.info("@stilo: Package successfully initialized.");

        } catch (error) {
            logger.error(error.message);
        }
    });


stilo.command("install <plugin>")
    .description("install a plugin")
    .action(async (packageId) => {
        logger.info(`@stilo: installing ${packageId}`);
        try {
            const package = Package.find(process.cwd());
            if (packageId[0] === '.') {
                packageId = pathlib.join(process.cwd(), packageId);
            }
            await package.install(packageId);
            logger.info(`@stilo: ${packageId} plugin installed`);

        } catch (error) {
            logger.error(error);
        }
    });


stilo.command("uninstall <plugin>")
    .description("uninstall a plugin")
    .action(async (packageId) => {
        logger.info(`@stilo: uninstalling ${packageId}`);
        try {
            const package = Package.find(process.cwd());
            await package.uninstall(packageId);
            logger.info(`@stilo: ${packageId} plugin uninstalled`);

        } catch (error) {
            logger.error(error);
        }
    });


stilo.command("read <path>")
    .description("fetch a document source and print it to the stdout")
    .action(async path => {
        try {
            const package = Package.find(process.cwd());
            const store = await package.getStore('/');
            const fullPath = store.resolveRelativePath(path);
            const source = await store.read(fullPath);
            console.log(source);

        } catch (error) {
            logger.error(error.message);
        }
    });


stilo.command("render <path>")
    .description("render a document and print it to the stdout")
    .action(async (path) => {
        try {
            const package = Package.find(process.cwd());
            const store = await package.getStore('/');
            const fullPath = store.resolveRelativePath(path);
            const source = await store.read(fullPath);
            const evaluate = store.parse(source);
            const context = store.createContext(fullPath);
            const {text} = await evaluate(context);
            console.log(text);

        } catch (error) {
            logger.error(error.message);
        }
    });


stilo.command("run", "executes a plugin command");


stilo.parse( process.argv );
