#!/usr/bin/env node

const stilo = require('commander').createCommand();

stilo.version(`v${require("../package.json").version}`, "-v --version");

stilo.command("init")
    .description("initialize the current directory as the root of an olojs document package")
    .option('--force', "eventually overwrites an existing instance")
    .option('--verbose', "logs detailed information")
    .action(require('../lib/stilo-init'));

stilo.command("install")
    .description("install a plugin")
    .argument('<plugin>', "npm package-id of the plugin to be installed")
    .option('--verbose', "logs detailed information")
    .action(require('../lib/stilo-install'));

stilo.command("uninstall")
    .description("uninstall a plugin from npm")
    .argument('<plugin>', "npm package-id of the plugin to be uninstalled")
    .option('--verbose', "logs detailed information")
    .action(require('../lib/stilo-uninstall'));

stilo.command("read")
    .description("fetch a document source and print it to the stdout")
    .argument('<path>', "path of the document to be fetched")
    .option('-o, --output <file-path>', "write the fetched source to a file")
    .option('--verbose', "logs detailed information")
    .action(require('../lib/stilo-read'));

stilo.command("render")
    .description("render a document and print it to the stdout")
    .argument('<path>', "path of the document to be rendered")
    .action(require('../lib/stilo-render'));

stilo.command("serve")
    .description("serve the stilo repository documents over HTTP")
    .argument('[path]', "root path to be served [defaults to '/']")
    .option('-p, --port <port>', "server port [defaults to 8010]")
    .option('--verbose', "logs detailed information")
    .action(require('../lib/stilo-serve'));

stilo.command("run", "executes a plugin command");

stilo.parse( process.argv );
