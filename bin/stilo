#!/usr/bin/env node

const stilo = require('commander').createCommand();

stilo.version(`v${require("../package.json").version}`, "-v --version");

stilo.command("init")
    .description("Initialize the current directory as a repository.")
    .option('--force', "eventually overwrite an existing instance")
    .option('--verbose', "log detailed information")
    .action(require('../lib/stilo-init'));

stilo.command("install")
    .description("Install a plugin.")
    .argument('<plugin>', "npm package-id of the plugin to be installed")
    .option('--verbose', "logs detailed information")
    .action(require('../lib/stilo-install'));

stilo.command("uninstall")
    .description("Uninstall a plugin.")
    .argument('<plugin>', "npm package-id of the plugin to be uninstalled")
    .option('--verbose', "logs detailed information")
    .action(require('../lib/stilo-uninstall'));

stilo.command("read")
    .description("Fetch a document source and print it to the stdout.")
    .argument('<path>', "path of the document to be fetched")
    .option('-o, --output <file-path>', "write the fetched source to a file")
    .option('--verbose', "logs detailed information")
    .action(require('../lib/stilo-read'));

stilo.command("render")
    .description("Render a document and print it to the stdout.")
    .argument('<path>', "path of the document to be rendered")
    .option('-o, --output <file-path>', "write the rendered document to a file")
    .option('--verbose', "logs detailed information")
    .action(require('../lib/stilo-render'));

stilo.command("run", "executes a plugin command");

stilo.parse( process.argv );
